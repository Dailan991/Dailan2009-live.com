<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>scm</string>
		<string>sch</string>
	</array>
	<key>name</key>
	<string>Scheme</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>;.*$\n?</string>
			<key>name</key>
			<string>comment.line.semi-colon.scheme</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#sexp</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>parameters</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.declaration.procedure.parameters</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*</string>
					<key>name</key>
					<string>variable.parameter</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[._]</string>
					<key>name</key>
					<string>variable.parameter</string>
				</dict>
			</array>
		</dict>
		<key>sexp</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>expression.scheme</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>;.*$\n?</string>
					<key>name</key>
					<string>comment.line.semi-colon.scheme</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\()(define)\s+\(([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*)((\s+([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*|[._]))*)\s*\)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.declaration.procedure</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#sexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\()(lambda)\s+\(((([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*|[._])\s*)*)\)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.declaration.procedure</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#sexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\()(define)\s([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*)\s*.*?</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.language</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.declaration.variable</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#sexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=(\s|\())(do|or|and|else|quasiquote|begin|if|quote|case|set!|cond|let|unquote|define|let\*|unquote-splicing|delay|letrec)(?=(\s|\())</string>
					<key>name</key>
					<string>keyword</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=(\s|\())(=|&gt;|-|\+|\*|/|&lt;|&gt;=|&lt;=|abs|acos|angle|append|apply|approximate|asin|assoc|assq|assv|atan|atom\?|boolean\?|bound-identifier=\?|caar|cadr|cdar|cddr|caaar|caadr|cadar|caddr|cdaar|cdadr|cddar|cdddr|caaaar|caaadr|caadar|caaddr|cadaar|cadadr|caddar|cadddr|cdaaar|cdaadr|cdadr|cdaddr|cddaar|cddadr|cdddar|cddddr|call-with-current-continuation|call-with-input-file|call-with-output-file|call/cc|car|catch|cdddar|cddddr|cdr|ceiling|char-&gt;integer|char-alphabetic\?|char-ci&lt;=\?|char-ci&lt;\?|char-ci=\?|char-ci&gt;=\?|char-ci&gt;\?|char-downcase|char-lower-case\?|char-numeric\?|char-ready|char-ready\?|char-upcase|char-upper-case\?|char-whitespace\?|char&lt;=\?|char&lt;\?|char=\?|char&gt;=\?|char&gt;\?|char\?|close-input-port|close-output-port|complex\?|cons|construct-identifier|cos|current-input-port|current-output-port|define-syntax|denominator|display|eof-object\?|eq\?|equal?|eqv\?|even\?|exact-&gt;inexact|exact\?|exp|expt|floor|foo|for-each|force|free-identifier=\?||cd|gen-counter|gen-loser|generate-identifier|identifier-&gt;symbol|identifier\?|imag-part|inexact-&gt;exact|inexact\?|input-port\?|integer-&gt;char|integer\?|last-pair|lcm|length|let-syntax|letrec-syntax|list|list-&gt;string|list-&gt;vector|list-ref|list-tail|list\?|load|log|macro|magnitude|make-polar|make-promise|make-rectangular|make-string|make-vector|map|map-streams|max|member|memq|memv|min|modulo|negative\?|newline|nil|not|null\?|number-&gt;string|number\?|numerator|odd\?|open-input-file|open-output-file|output-port\?|pair\?|peek-char|positive\?|procedure\?|quotient|rational\?|rationalize|read|read-char|real-part|real\?|remainder|return|reverse|round|sequence|set-car!|set-cdr!|sin|sqrt|string|string-&gt;list|string-&gt;number|string-&gt;symbol|string-append|string-ci&lt;=\?|string-ci&lt;\?|string-ci=\?|string-ci&gt;=\?|string-ci&gt;\?|string-copy|string-fill!|string-length|string-ref|string-set!|string&lt;=\?|string&lt;\?|string=\?|string&gt;=\?|string&gt;\?|string\?|substring|symbol-&gt;string|symbol\?|syntax|syntax-rules|tan|transcript-off|transcript-on|truncate|unwrap-syntax|values-list|vector|vector-&gt;list|vector-fill!|vector-length|vector-ref|vector-set!|vector\?|with-input-from-file|with-output-to-file|write|write-char|zero\?)(?=(\s|\())</string>
					<key>name</key>
					<string>support.function</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.untitled</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escaped</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(#t|#f|'\(\))</string>
					<key>name</key>
					<string>constant.language</string>
				</dict>
				<dict>
					<key>match</key>
					<string>'[[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*</string>
					<key>name</key>
					<string>constant.other.symbol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#e|#i)?[0-9][0-9.]*</string>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#x)[0-9a-fA-F]+</string>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#o)[0-7]+</string>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#b)[01]+</string>
					<key>name</key>
					<string>constant.numeric</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#\\).</string>
					<key>name</key>
					<string>constant.character</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#sexp</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.scheme</string>
	<key>uuid</key>
	<string>3EC2CFD0-909C-4692-AC29-1A60ADBC161E</string>
</dict>
</plist>
